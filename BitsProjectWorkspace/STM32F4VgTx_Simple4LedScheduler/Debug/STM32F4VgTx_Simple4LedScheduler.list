
STM32F4VgTx_Simple4LedScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800126c  0800126c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001318  08001318  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001318  08001318  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001318  08001318  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001318  08001318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000068  08001388  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001388  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025b8  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007ac  00000000  00000000  0002264a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000200  00000000  00000000  00022df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c8f  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018f8  00000000  00000000  00025e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000977e  00000000  00000000  00027737  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c7c  00000000  00000000  00030f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001254 	.word	0x08001254

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001254 	.word	0x08001254

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
	...

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]

	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002e8:	f000 f924 	bl	8000534 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x28>)
 80002ee:	f000 f88f 	bl	8000410 <init_scheduler_stack>

	init_tasks_stack();
 80002f2:	f000 f893 	bl	800041c <init_tasks_stack>

	led_init_all();
 80002f6:	f7ff ff8b 	bl	8000210 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f853 	bl	80003a8 <init_systick_timer>

	switch_sp_to_psp();
 8000302:	f000 f99d 	bl	8000640 <switch_sp_to_psp>

	task1_handler();
 8000306:	f000 f807 	bl	8000318 <task1_handler>

	for(;;);
 800030a:	e7fe      	b.n	800030a <main+0x26>
 800030c:	2001ec00 	.word	0x2001ec00

08000310 <idle_task>:
}


void idle_task(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	while(1);
 8000314:	e7fe      	b.n	8000314 <idle_task+0x4>
	...

08000318 <task1_handler>:
}


void task1_handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 800031c:	200c      	movs	r0, #12
 800031e:	f7ff ffb1 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <task1_handler+0x20>)
 8000324:	f7ff ff60 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000328:	200c      	movs	r0, #12
 800032a:	f7ff ffc3 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <task1_handler+0x20>)
 8000330:	f7ff ff5a 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000334:	e7f2      	b.n	800031c <task1_handler+0x4>
 8000336:	bf00      	nop
 8000338:	001312d0 	.word	0x001312d0

0800033c <task2_handler>:
	}
}
void task2_handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000340:	200d      	movs	r0, #13
 8000342:	f7ff ff9f 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <task2_handler+0x20>)
 8000348:	f7ff ff4e 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 800034c:	200d      	movs	r0, #13
 800034e:	f7ff ffb1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <task2_handler+0x20>)
 8000354:	f7ff ff48 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000358:	e7f2      	b.n	8000340 <task2_handler+0x4>
 800035a:	bf00      	nop
 800035c:	00098968 	.word	0x00098968

08000360 <task3_handler>:
	}
}
void task3_handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000364:	200f      	movs	r0, #15
 8000366:	f7ff ff8d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <task3_handler+0x20>)
 800036c:	f7ff ff3c 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000370:	200f      	movs	r0, #15
 8000372:	f7ff ff9f 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <task3_handler+0x20>)
 8000378:	f7ff ff36 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 800037c:	e7f2      	b.n	8000364 <task3_handler+0x4>
 800037e:	bf00      	nop
 8000380:	0004c4b4 	.word	0x0004c4b4

08000384 <task4_handler>:
	}
}
void task4_handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000388:	200e      	movs	r0, #14
 800038a:	f7ff ff7b 	bl	8000284 <led_on>
		delay(DELAY_COUNT_100MS);
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <task4_handler+0x20>)
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000394:	200e      	movs	r0, #14
 8000396:	f7ff ff8d 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_100MS);
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <task4_handler+0x20>)
 800039c:	f7ff ff24 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a0:	e7f2      	b.n	8000388 <task4_handler+0x4>
 80003a2:	bf00      	nop
 80003a4:	0001e848 	.word	0x0001e848

080003a8 <init_systick_timer>:
	}
}


void init_systick_timer(uint32_t tick_hz)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <init_systick_timer+0x5c>)
 80003b2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <init_systick_timer+0x60>)
 80003b6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <init_systick_timer+0x64>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	3b01      	subs	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f043 0202 	orr.w	r2, r3, #2
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f043 0204 	orr.w	r2, r3, #4
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f043 0201 	orr.w	r2, r3, #1
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	601a      	str	r2, [r3, #0]

}
 80003fa:	bf00      	nop
 80003fc:	371c      	adds	r7, #28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	e000e014 	.word	0xe000e014
 8000408:	e000e010 	.word	0xe000e010
 800040c:	00f42400 	.word	0x00f42400

08000410 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000410:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 8000412:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 8000416:	4770      	bx	lr

}
 8000418:	bf00      	nop
	...

0800041c <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 8000422:	4b39      	ldr	r3, [pc, #228]	; (8000508 <init_tasks_stack+0xec>)
 8000424:	2200      	movs	r2, #0
 8000426:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000428:	4b37      	ldr	r3, [pc, #220]	; (8000508 <init_tasks_stack+0xec>)
 800042a:	2200      	movs	r2, #0
 800042c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800042e:	4b36      	ldr	r3, [pc, #216]	; (8000508 <init_tasks_stack+0xec>)
 8000430:	2200      	movs	r2, #0
 8000432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000436:	4b34      	ldr	r3, [pc, #208]	; (8000508 <init_tasks_stack+0xec>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <init_tasks_stack+0xec>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <init_tasks_stack+0xec>)
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <init_tasks_stack+0xf0>)
 800044a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800044c:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <init_tasks_stack+0xec>)
 800044e:	4a30      	ldr	r2, [pc, #192]	; (8000510 <init_tasks_stack+0xf4>)
 8000450:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <init_tasks_stack+0xec>)
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <init_tasks_stack+0xf8>)
 8000456:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <init_tasks_stack+0xec>)
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <init_tasks_stack+0xfc>)
 800045c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <init_tasks_stack+0xec>)
 8000460:	4a2e      	ldr	r2, [pc, #184]	; (800051c <init_tasks_stack+0x100>)
 8000462:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <init_tasks_stack+0xec>)
 8000466:	4a2e      	ldr	r2, [pc, #184]	; (8000520 <init_tasks_stack+0x104>)
 8000468:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800046a:	4b27      	ldr	r3, [pc, #156]	; (8000508 <init_tasks_stack+0xec>)
 800046c:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <init_tasks_stack+0x108>)
 800046e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <init_tasks_stack+0xec>)
 8000472:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <init_tasks_stack+0x10c>)
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <init_tasks_stack+0xec>)
 8000478:	4a2c      	ldr	r2, [pc, #176]	; (800052c <init_tasks_stack+0x110>)
 800047a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800047c:	4b22      	ldr	r3, [pc, #136]	; (8000508 <init_tasks_stack+0xec>)
 800047e:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <init_tasks_stack+0x114>)
 8000480:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	e037      	b.n	80004f8 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000488:	4a1f      	ldr	r2, [pc, #124]	; (8000508 <init_tasks_stack+0xec>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4413      	add	r3, r2
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3b04      	subs	r3, #4
 8000498:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a0:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3b04      	subs	r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004a8:	4a17      	ldr	r2, [pc, #92]	; (8000508 <init_tasks_stack+0xec>)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	4413      	add	r3, r2
 80004b0:	330c      	adds	r3, #12
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3b04      	subs	r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f06f 0202 	mvn.w	r2, #2
 80004c6:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	e008      	b.n	80004e0 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3b04      	subs	r3, #4
 80004d2:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b0c      	cmp	r3, #12
 80004e4:	ddf3      	ble.n	80004ce <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4907      	ldr	r1, [pc, #28]	; (8000508 <init_tasks_stack+0xec>)
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	011b      	lsls	r3, r3, #4
 80004ee:	440b      	add	r3, r1
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	ddc4      	ble.n	8000488 <init_tasks_stack+0x6c>


	}

}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20000094 	.word	0x20000094
 800050c:	2001f000 	.word	0x2001f000
 8000510:	20020000 	.word	0x20020000
 8000514:	2001fc00 	.word	0x2001fc00
 8000518:	2001f800 	.word	0x2001f800
 800051c:	2001f400 	.word	0x2001f400
 8000520:	08000311 	.word	0x08000311
 8000524:	08000319 	.word	0x08000319
 8000528:	0800033d 	.word	0x0800033d
 800052c:	08000361 	.word	0x08000361
 8000530:	08000385 	.word	0x08000385

08000534 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <enable_processor_faults+0x38>)
 800053c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	e000ed24 	.word	0xe000ed24

08000570 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <get_psp_value+0x18>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <get_psp_value+0x1c>)
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4413      	add	r3, r2
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000000 	.word	0x20000000
 800058c:	20000094 	.word	0x20000094

08000590 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <save_psp_value+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <save_psp_value+0x24>)
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000094 	.word	0x20000094

080005b8 <update_next_task>:


void update_next_task(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005be:	23ff      	movs	r3, #255	; 0xff
 80005c0:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	e024      	b.n	8000612 <update_next_task+0x5a>
	{
		current_task++;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <update_next_task+0x7c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <update_next_task+0x7c>)
 80005d2:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <update_next_task+0x7c>)
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <update_next_task+0x80>)
 80005da:	fba3 1302 	umull	r1, r3, r3, r2
 80005de:	0899      	lsrs	r1, r3, #2
 80005e0:	460b      	mov	r3, r1
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <update_next_task+0x7c>)
 80005ec:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <update_next_task+0x7c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <update_next_task+0x84>)
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	4413      	add	r3, r2
 80005f8:	3308      	adds	r3, #8
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d103      	bne.n	800060c <update_next_task+0x54>
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <update_next_task+0x7c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d106      	bne.n	800061a <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b04      	cmp	r3, #4
 8000616:	ddd7      	ble.n	80005c8 <update_next_task+0x10>
 8000618:	e000      	b.n	800061c <update_next_task+0x64>
			break;
 800061a:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <update_next_task+0x70>
		current_task = 0;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <update_next_task+0x7c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	cccccccd 	.word	0xcccccccd
 800063c:	20000094 	.word	0x20000094

08000640 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000640:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000642:	f7ff ff95 	bl	8000570 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 8000646:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 800064a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 800064e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000652:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000656:	4770      	bx	lr
}
 8000658:	bf00      	nop

0800065a <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 800065a:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 800065e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000662:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000664:	f7ff ff94 	bl	8000590 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000668:	f7ff ffa6 	bl	80005b8 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 800066c:	f7ff ff80 	bl	8000570 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000670:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000674:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000678:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800067c:	4770      	bx	lr



}
 800067e:	bf00      	nop

08000680 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <update_global_tick_count+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a03      	ldr	r2, [pc, #12]	; (8000698 <update_global_tick_count+0x18>)
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084

0800069c <unblock_tasks>:

void unblock_tasks(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006a2:	2301      	movs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	e01b      	b.n	80006e0 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <unblock_tasks+0x54>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4413      	add	r3, r2
 80006b0:	3308      	adds	r3, #8
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <unblock_tasks+0x54>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	4413      	add	r3, r2
 80006c0:	3304      	adds	r3, #4
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <unblock_tasks+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d106      	bne.n	80006da <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <unblock_tasks+0x54>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	3308      	adds	r3, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	dde0      	ble.n	80006a8 <unblock_tasks+0xc>
			}
		}

	}

}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000094 	.word	0x20000094
 80006f4:	20000084 	.word	0x20000084

080006f8 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <SysTick_Handler+0x28>)
 8000700:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 8000702:	f7ff ffbd 	bl	8000680 <update_global_tick_count>

    unblock_tasks();
 8000706:	f7ff ffc9 	bl	800069c <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000728:	4801      	ldr	r0, [pc, #4]	; (8000730 <HardFault_Handler+0xc>)
 800072a:	f000 f987 	bl	8000a3c <puts>
	while(1);
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0xa>
 8000730:	0800126c 	.word	0x0800126c

08000734 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <MemManage_Handler+0xc>)
 800073a:	f000 f97f 	bl	8000a3c <puts>
	while(1);
 800073e:	e7fe      	b.n	800073e <MemManage_Handler+0xa>
 8000740:	08001284 	.word	0x08001284

08000744 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <BusFault_Handler+0xc>)
 800074a:	f000 f977 	bl	8000a3c <puts>
	while(1);
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0xa>
 8000750:	0800129c 	.word	0x0800129c

08000754 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <ITM_SendChar+0x44>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <ITM_SendChar+0x44>)
 8000764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000768:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <ITM_SendChar+0x48>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <ITM_SendChar+0x48>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000776:	bf00      	nop
 8000778:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f8      	beq.n	8000778 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000786:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	6013      	str	r3, [r2, #0]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	e000edfc 	.word	0xe000edfc
 800079c:	e0000e00 	.word	0xe0000e00

080007a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e00a      	b.n	80007c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007b2:	f3af 8000 	nop.w
 80007b6:	4601      	mov	r1, r0
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf0      	blt.n	80007b2 <_read+0x12>
	}

return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e009      	b.n	8000800 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffad 	bl	8000754 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf1      	blt.n	80007ec <_write+0x12>
	}
	return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_close>:

int _close(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	return -1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000838:	605a      	str	r2, [r3, #4]
	return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
	return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <_sbrk+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x16>
		heap_end = &end;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <_sbrk+0x50>)
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <_sbrk+0x54>)
 8000888:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <_sbrk+0x50>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <_sbrk+0x50>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	466a      	mov	r2, sp
 800089a:	4293      	cmp	r3, r2
 800089c:	d907      	bls.n	80008ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800089e:	f000 f83f 	bl	8000920 <__errno>
 80008a2:	4602      	mov	r2, r0
 80008a4:	230c      	movs	r3, #12
 80008a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	e006      	b.n	80008bc <_sbrk+0x48>
	}

	heap_end += incr;
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <_sbrk+0x50>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <_sbrk+0x50>)
 80008b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000088 	.word	0x20000088
 80008c8:	200000e8 	.word	0x200000e8

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008f6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008fa:	f000 f817 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fcf1 	bl	80002e4 <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   r0, =_estack
 8000904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000910:	08001320 	.word	0x08001320
  ldr r2, =_sbss
 8000914:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000918:	200000e8 	.word	0x200000e8

0800091c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <__errno>:
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <__errno+0x8>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000004 	.word	0x20000004

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4e0d      	ldr	r6, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1ba4      	subs	r4, r4, r6
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2500      	movs	r5, #0
 8000938:	42a5      	cmp	r5, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4e0b      	ldr	r6, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f000 fc88 	bl	8001254 <_init>
 8000944:	1ba4      	subs	r4, r4, r6
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2500      	movs	r5, #0
 800094a:	42a5      	cmp	r5, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000954:	4798      	blx	r3
 8000956:	3501      	adds	r5, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095e:	4798      	blx	r3
 8000960:	3501      	adds	r5, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	08001318 	.word	0x08001318
 8000968:	08001318 	.word	0x08001318
 800096c:	08001318 	.word	0x08001318
 8000970:	0800131c 	.word	0x0800131c

08000974 <memset>:
 8000974:	4402      	add	r2, r0
 8000976:	4603      	mov	r3, r0
 8000978:	4293      	cmp	r3, r2
 800097a:	d100      	bne.n	800097e <memset+0xa>
 800097c:	4770      	bx	lr
 800097e:	f803 1b01 	strb.w	r1, [r3], #1
 8000982:	e7f9      	b.n	8000978 <memset+0x4>

08000984 <_puts_r>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	460e      	mov	r6, r1
 8000988:	4605      	mov	r5, r0
 800098a:	b118      	cbz	r0, 8000994 <_puts_r+0x10>
 800098c:	6983      	ldr	r3, [r0, #24]
 800098e:	b90b      	cbnz	r3, 8000994 <_puts_r+0x10>
 8000990:	f000 fa0c 	bl	8000dac <__sinit>
 8000994:	69ab      	ldr	r3, [r5, #24]
 8000996:	68ac      	ldr	r4, [r5, #8]
 8000998:	b913      	cbnz	r3, 80009a0 <_puts_r+0x1c>
 800099a:	4628      	mov	r0, r5
 800099c:	f000 fa06 	bl	8000dac <__sinit>
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <_puts_r+0xac>)
 80009a2:	429c      	cmp	r4, r3
 80009a4:	d117      	bne.n	80009d6 <_puts_r+0x52>
 80009a6:	686c      	ldr	r4, [r5, #4]
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	071b      	lsls	r3, r3, #28
 80009ac:	d51d      	bpl.n	80009ea <_puts_r+0x66>
 80009ae:	6923      	ldr	r3, [r4, #16]
 80009b0:	b1db      	cbz	r3, 80009ea <_puts_r+0x66>
 80009b2:	3e01      	subs	r6, #1
 80009b4:	68a3      	ldr	r3, [r4, #8]
 80009b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009ba:	3b01      	subs	r3, #1
 80009bc:	60a3      	str	r3, [r4, #8]
 80009be:	b9e9      	cbnz	r1, 80009fc <_puts_r+0x78>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da2e      	bge.n	8000a22 <_puts_r+0x9e>
 80009c4:	4622      	mov	r2, r4
 80009c6:	210a      	movs	r1, #10
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 f83f 	bl	8000a4c <__swbuf_r>
 80009ce:	3001      	adds	r0, #1
 80009d0:	d011      	beq.n	80009f6 <_puts_r+0x72>
 80009d2:	200a      	movs	r0, #10
 80009d4:	e011      	b.n	80009fa <_puts_r+0x76>
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <_puts_r+0xb0>)
 80009d8:	429c      	cmp	r4, r3
 80009da:	d101      	bne.n	80009e0 <_puts_r+0x5c>
 80009dc:	68ac      	ldr	r4, [r5, #8]
 80009de:	e7e3      	b.n	80009a8 <_puts_r+0x24>
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_puts_r+0xb4>)
 80009e2:	429c      	cmp	r4, r3
 80009e4:	bf08      	it	eq
 80009e6:	68ec      	ldreq	r4, [r5, #12]
 80009e8:	e7de      	b.n	80009a8 <_puts_r+0x24>
 80009ea:	4621      	mov	r1, r4
 80009ec:	4628      	mov	r0, r5
 80009ee:	f000 f87f 	bl	8000af0 <__swsetup_r>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d0dd      	beq.n	80009b2 <_puts_r+0x2e>
 80009f6:	f04f 30ff 	mov.w	r0, #4294967295
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da04      	bge.n	8000a0a <_puts_r+0x86>
 8000a00:	69a2      	ldr	r2, [r4, #24]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dc06      	bgt.n	8000a14 <_puts_r+0x90>
 8000a06:	290a      	cmp	r1, #10
 8000a08:	d004      	beq.n	8000a14 <_puts_r+0x90>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	6022      	str	r2, [r4, #0]
 8000a10:	7019      	strb	r1, [r3, #0]
 8000a12:	e7cf      	b.n	80009b4 <_puts_r+0x30>
 8000a14:	4622      	mov	r2, r4
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 f818 	bl	8000a4c <__swbuf_r>
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	d1c9      	bne.n	80009b4 <_puts_r+0x30>
 8000a20:	e7e9      	b.n	80009f6 <_puts_r+0x72>
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	200a      	movs	r0, #10
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	6022      	str	r2, [r4, #0]
 8000a2a:	7018      	strb	r0, [r3, #0]
 8000a2c:	e7e5      	b.n	80009fa <_puts_r+0x76>
 8000a2e:	bf00      	nop
 8000a30:	080012d8 	.word	0x080012d8
 8000a34:	080012f8 	.word	0x080012f8
 8000a38:	080012b8 	.word	0x080012b8

08000a3c <puts>:
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <puts+0xc>)
 8000a3e:	4601      	mov	r1, r0
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f7ff bf9f 	b.w	8000984 <_puts_r>
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004

08000a4c <__swbuf_r>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	460e      	mov	r6, r1
 8000a50:	4614      	mov	r4, r2
 8000a52:	4605      	mov	r5, r0
 8000a54:	b118      	cbz	r0, 8000a5e <__swbuf_r+0x12>
 8000a56:	6983      	ldr	r3, [r0, #24]
 8000a58:	b90b      	cbnz	r3, 8000a5e <__swbuf_r+0x12>
 8000a5a:	f000 f9a7 	bl	8000dac <__sinit>
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <__swbuf_r+0x98>)
 8000a60:	429c      	cmp	r4, r3
 8000a62:	d12a      	bne.n	8000aba <__swbuf_r+0x6e>
 8000a64:	686c      	ldr	r4, [r5, #4]
 8000a66:	69a3      	ldr	r3, [r4, #24]
 8000a68:	60a3      	str	r3, [r4, #8]
 8000a6a:	89a3      	ldrh	r3, [r4, #12]
 8000a6c:	071a      	lsls	r2, r3, #28
 8000a6e:	d52e      	bpl.n	8000ace <__swbuf_r+0x82>
 8000a70:	6923      	ldr	r3, [r4, #16]
 8000a72:	b363      	cbz	r3, 8000ace <__swbuf_r+0x82>
 8000a74:	6923      	ldr	r3, [r4, #16]
 8000a76:	6820      	ldr	r0, [r4, #0]
 8000a78:	1ac0      	subs	r0, r0, r3
 8000a7a:	6963      	ldr	r3, [r4, #20]
 8000a7c:	b2f6      	uxtb	r6, r6
 8000a7e:	4283      	cmp	r3, r0
 8000a80:	4637      	mov	r7, r6
 8000a82:	dc04      	bgt.n	8000a8e <__swbuf_r+0x42>
 8000a84:	4621      	mov	r1, r4
 8000a86:	4628      	mov	r0, r5
 8000a88:	f000 f926 	bl	8000cd8 <_fflush_r>
 8000a8c:	bb28      	cbnz	r0, 8000ada <__swbuf_r+0x8e>
 8000a8e:	68a3      	ldr	r3, [r4, #8]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	60a3      	str	r3, [r4, #8]
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	6022      	str	r2, [r4, #0]
 8000a9a:	701e      	strb	r6, [r3, #0]
 8000a9c:	6963      	ldr	r3, [r4, #20]
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	4283      	cmp	r3, r0
 8000aa2:	d004      	beq.n	8000aae <__swbuf_r+0x62>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	07db      	lsls	r3, r3, #31
 8000aa8:	d519      	bpl.n	8000ade <__swbuf_r+0x92>
 8000aaa:	2e0a      	cmp	r6, #10
 8000aac:	d117      	bne.n	8000ade <__swbuf_r+0x92>
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	f000 f911 	bl	8000cd8 <_fflush_r>
 8000ab6:	b190      	cbz	r0, 8000ade <__swbuf_r+0x92>
 8000ab8:	e00f      	b.n	8000ada <__swbuf_r+0x8e>
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <__swbuf_r+0x9c>)
 8000abc:	429c      	cmp	r4, r3
 8000abe:	d101      	bne.n	8000ac4 <__swbuf_r+0x78>
 8000ac0:	68ac      	ldr	r4, [r5, #8]
 8000ac2:	e7d0      	b.n	8000a66 <__swbuf_r+0x1a>
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <__swbuf_r+0xa0>)
 8000ac6:	429c      	cmp	r4, r3
 8000ac8:	bf08      	it	eq
 8000aca:	68ec      	ldreq	r4, [r5, #12]
 8000acc:	e7cb      	b.n	8000a66 <__swbuf_r+0x1a>
 8000ace:	4621      	mov	r1, r4
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f000 f80d 	bl	8000af0 <__swsetup_r>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d0cc      	beq.n	8000a74 <__swbuf_r+0x28>
 8000ada:	f04f 37ff 	mov.w	r7, #4294967295
 8000ade:	4638      	mov	r0, r7
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	080012d8 	.word	0x080012d8
 8000ae8:	080012f8 	.word	0x080012f8
 8000aec:	080012b8 	.word	0x080012b8

08000af0 <__swsetup_r>:
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <__swsetup_r+0xcc>)
 8000af2:	b570      	push	{r4, r5, r6, lr}
 8000af4:	681d      	ldr	r5, [r3, #0]
 8000af6:	4606      	mov	r6, r0
 8000af8:	460c      	mov	r4, r1
 8000afa:	b125      	cbz	r5, 8000b06 <__swsetup_r+0x16>
 8000afc:	69ab      	ldr	r3, [r5, #24]
 8000afe:	b913      	cbnz	r3, 8000b06 <__swsetup_r+0x16>
 8000b00:	4628      	mov	r0, r5
 8000b02:	f000 f953 	bl	8000dac <__sinit>
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <__swsetup_r+0xd0>)
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d10f      	bne.n	8000b2c <__swsetup_r+0x3c>
 8000b0c:	686c      	ldr	r4, [r5, #4]
 8000b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	0715      	lsls	r5, r2, #28
 8000b16:	d42c      	bmi.n	8000b72 <__swsetup_r+0x82>
 8000b18:	06d0      	lsls	r0, r2, #27
 8000b1a:	d411      	bmi.n	8000b40 <__swsetup_r+0x50>
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	6032      	str	r2, [r6, #0]
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	81a3      	strh	r3, [r4, #12]
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2a:	e03e      	b.n	8000baa <__swsetup_r+0xba>
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <__swsetup_r+0xd4>)
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	d101      	bne.n	8000b36 <__swsetup_r+0x46>
 8000b32:	68ac      	ldr	r4, [r5, #8]
 8000b34:	e7eb      	b.n	8000b0e <__swsetup_r+0x1e>
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <__swsetup_r+0xd8>)
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	bf08      	it	eq
 8000b3c:	68ec      	ldreq	r4, [r5, #12]
 8000b3e:	e7e6      	b.n	8000b0e <__swsetup_r+0x1e>
 8000b40:	0751      	lsls	r1, r2, #29
 8000b42:	d512      	bpl.n	8000b6a <__swsetup_r+0x7a>
 8000b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b46:	b141      	cbz	r1, 8000b5a <__swsetup_r+0x6a>
 8000b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d002      	beq.n	8000b56 <__swsetup_r+0x66>
 8000b50:	4630      	mov	r0, r6
 8000b52:	f000 fa19 	bl	8000f88 <_free_r>
 8000b56:	2300      	movs	r3, #0
 8000b58:	6363      	str	r3, [r4, #52]	; 0x34
 8000b5a:	89a3      	ldrh	r3, [r4, #12]
 8000b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b60:	81a3      	strh	r3, [r4, #12]
 8000b62:	2300      	movs	r3, #0
 8000b64:	6063      	str	r3, [r4, #4]
 8000b66:	6923      	ldr	r3, [r4, #16]
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	81a3      	strh	r3, [r4, #12]
 8000b72:	6923      	ldr	r3, [r4, #16]
 8000b74:	b94b      	cbnz	r3, 8000b8a <__swsetup_r+0x9a>
 8000b76:	89a3      	ldrh	r3, [r4, #12]
 8000b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b80:	d003      	beq.n	8000b8a <__swsetup_r+0x9a>
 8000b82:	4621      	mov	r1, r4
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 f9bf 	bl	8000f08 <__smakebuf_r>
 8000b8a:	89a2      	ldrh	r2, [r4, #12]
 8000b8c:	f012 0301 	ands.w	r3, r2, #1
 8000b90:	d00c      	beq.n	8000bac <__swsetup_r+0xbc>
 8000b92:	2300      	movs	r3, #0
 8000b94:	60a3      	str	r3, [r4, #8]
 8000b96:	6963      	ldr	r3, [r4, #20]
 8000b98:	425b      	negs	r3, r3
 8000b9a:	61a3      	str	r3, [r4, #24]
 8000b9c:	6923      	ldr	r3, [r4, #16]
 8000b9e:	b953      	cbnz	r3, 8000bb6 <__swsetup_r+0xc6>
 8000ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ba4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000ba8:	d1ba      	bne.n	8000b20 <__swsetup_r+0x30>
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	0792      	lsls	r2, r2, #30
 8000bae:	bf58      	it	pl
 8000bb0:	6963      	ldrpl	r3, [r4, #20]
 8000bb2:	60a3      	str	r3, [r4, #8]
 8000bb4:	e7f2      	b.n	8000b9c <__swsetup_r+0xac>
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f7      	b.n	8000baa <__swsetup_r+0xba>
 8000bba:	bf00      	nop
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	080012d8 	.word	0x080012d8
 8000bc4:	080012f8 	.word	0x080012f8
 8000bc8:	080012b8 	.word	0x080012b8

08000bcc <__sflush_r>:
 8000bcc:	898a      	ldrh	r2, [r1, #12]
 8000bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	4605      	mov	r5, r0
 8000bd4:	0710      	lsls	r0, r2, #28
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	d458      	bmi.n	8000c8c <__sflush_r+0xc0>
 8000bda:	684b      	ldr	r3, [r1, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dc05      	bgt.n	8000bec <__sflush_r+0x20>
 8000be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dc02      	bgt.n	8000bec <__sflush_r+0x20>
 8000be6:	2000      	movs	r0, #0
 8000be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d0f9      	beq.n	8000be6 <__sflush_r+0x1a>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bf8:	682f      	ldr	r7, [r5, #0]
 8000bfa:	6a21      	ldr	r1, [r4, #32]
 8000bfc:	602b      	str	r3, [r5, #0]
 8000bfe:	d032      	beq.n	8000c66 <__sflush_r+0x9a>
 8000c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	075a      	lsls	r2, r3, #29
 8000c06:	d505      	bpl.n	8000c14 <__sflush_r+0x48>
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	1ac0      	subs	r0, r0, r3
 8000c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c0e:	b10b      	cbz	r3, 8000c14 <__sflush_r+0x48>
 8000c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c12:	1ac0      	subs	r0, r0, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	4602      	mov	r2, r0
 8000c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c1a:	6a21      	ldr	r1, [r4, #32]
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	47b0      	blx	r6
 8000c20:	1c43      	adds	r3, r0, #1
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	d106      	bne.n	8000c34 <__sflush_r+0x68>
 8000c26:	6829      	ldr	r1, [r5, #0]
 8000c28:	291d      	cmp	r1, #29
 8000c2a:	d848      	bhi.n	8000cbe <__sflush_r+0xf2>
 8000c2c:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <__sflush_r+0x108>)
 8000c2e:	40ca      	lsrs	r2, r1
 8000c30:	07d6      	lsls	r6, r2, #31
 8000c32:	d544      	bpl.n	8000cbe <__sflush_r+0xf2>
 8000c34:	2200      	movs	r2, #0
 8000c36:	6062      	str	r2, [r4, #4]
 8000c38:	04d9      	lsls	r1, r3, #19
 8000c3a:	6922      	ldr	r2, [r4, #16]
 8000c3c:	6022      	str	r2, [r4, #0]
 8000c3e:	d504      	bpl.n	8000c4a <__sflush_r+0x7e>
 8000c40:	1c42      	adds	r2, r0, #1
 8000c42:	d101      	bne.n	8000c48 <__sflush_r+0x7c>
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	b903      	cbnz	r3, 8000c4a <__sflush_r+0x7e>
 8000c48:	6560      	str	r0, [r4, #84]	; 0x54
 8000c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c4c:	602f      	str	r7, [r5, #0]
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d0c9      	beq.n	8000be6 <__sflush_r+0x1a>
 8000c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d002      	beq.n	8000c60 <__sflush_r+0x94>
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f000 f994 	bl	8000f88 <_free_r>
 8000c60:	2000      	movs	r0, #0
 8000c62:	6360      	str	r0, [r4, #52]	; 0x34
 8000c64:	e7c0      	b.n	8000be8 <__sflush_r+0x1c>
 8000c66:	2301      	movs	r3, #1
 8000c68:	4628      	mov	r0, r5
 8000c6a:	47b0      	blx	r6
 8000c6c:	1c41      	adds	r1, r0, #1
 8000c6e:	d1c8      	bne.n	8000c02 <__sflush_r+0x36>
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0c5      	beq.n	8000c02 <__sflush_r+0x36>
 8000c76:	2b1d      	cmp	r3, #29
 8000c78:	d001      	beq.n	8000c7e <__sflush_r+0xb2>
 8000c7a:	2b16      	cmp	r3, #22
 8000c7c:	d101      	bne.n	8000c82 <__sflush_r+0xb6>
 8000c7e:	602f      	str	r7, [r5, #0]
 8000c80:	e7b1      	b.n	8000be6 <__sflush_r+0x1a>
 8000c82:	89a3      	ldrh	r3, [r4, #12]
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	81a3      	strh	r3, [r4, #12]
 8000c8a:	e7ad      	b.n	8000be8 <__sflush_r+0x1c>
 8000c8c:	690f      	ldr	r7, [r1, #16]
 8000c8e:	2f00      	cmp	r7, #0
 8000c90:	d0a9      	beq.n	8000be6 <__sflush_r+0x1a>
 8000c92:	0793      	lsls	r3, r2, #30
 8000c94:	680e      	ldr	r6, [r1, #0]
 8000c96:	bf08      	it	eq
 8000c98:	694b      	ldreq	r3, [r1, #20]
 8000c9a:	600f      	str	r7, [r1, #0]
 8000c9c:	bf18      	it	ne
 8000c9e:	2300      	movne	r3, #0
 8000ca0:	eba6 0807 	sub.w	r8, r6, r7
 8000ca4:	608b      	str	r3, [r1, #8]
 8000ca6:	f1b8 0f00 	cmp.w	r8, #0
 8000caa:	dd9c      	ble.n	8000be6 <__sflush_r+0x1a>
 8000cac:	4643      	mov	r3, r8
 8000cae:	463a      	mov	r2, r7
 8000cb0:	6a21      	ldr	r1, [r4, #32]
 8000cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	47b0      	blx	r6
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	dc06      	bgt.n	8000cca <__sflush_r+0xfe>
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc2:	81a3      	strh	r3, [r4, #12]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	e78e      	b.n	8000be8 <__sflush_r+0x1c>
 8000cca:	4407      	add	r7, r0
 8000ccc:	eba8 0800 	sub.w	r8, r8, r0
 8000cd0:	e7e9      	b.n	8000ca6 <__sflush_r+0xda>
 8000cd2:	bf00      	nop
 8000cd4:	20400001 	.word	0x20400001

08000cd8 <_fflush_r>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	4605      	mov	r5, r0
 8000cde:	460c      	mov	r4, r1
 8000ce0:	b1db      	cbz	r3, 8000d1a <_fflush_r+0x42>
 8000ce2:	b118      	cbz	r0, 8000cec <_fflush_r+0x14>
 8000ce4:	6983      	ldr	r3, [r0, #24]
 8000ce6:	b90b      	cbnz	r3, 8000cec <_fflush_r+0x14>
 8000ce8:	f000 f860 	bl	8000dac <__sinit>
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <_fflush_r+0x48>)
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	d109      	bne.n	8000d06 <_fflush_r+0x2e>
 8000cf2:	686c      	ldr	r4, [r5, #4]
 8000cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf8:	b17b      	cbz	r3, 8000d1a <_fflush_r+0x42>
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d02:	f7ff bf63 	b.w	8000bcc <__sflush_r>
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <_fflush_r+0x4c>)
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d101      	bne.n	8000d10 <_fflush_r+0x38>
 8000d0c:	68ac      	ldr	r4, [r5, #8]
 8000d0e:	e7f1      	b.n	8000cf4 <_fflush_r+0x1c>
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <_fflush_r+0x50>)
 8000d12:	429c      	cmp	r4, r3
 8000d14:	bf08      	it	eq
 8000d16:	68ec      	ldreq	r4, [r5, #12]
 8000d18:	e7ec      	b.n	8000cf4 <_fflush_r+0x1c>
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	080012d8 	.word	0x080012d8
 8000d24:	080012f8 	.word	0x080012f8
 8000d28:	080012b8 	.word	0x080012b8

08000d2c <std>:
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	b510      	push	{r4, lr}
 8000d30:	4604      	mov	r4, r0
 8000d32:	e9c0 3300 	strd	r3, r3, [r0]
 8000d36:	6083      	str	r3, [r0, #8]
 8000d38:	8181      	strh	r1, [r0, #12]
 8000d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d3c:	81c2      	strh	r2, [r0, #14]
 8000d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d42:	6183      	str	r3, [r0, #24]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2208      	movs	r2, #8
 8000d48:	305c      	adds	r0, #92	; 0x5c
 8000d4a:	f7ff fe13 	bl	8000974 <memset>
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <std+0x38>)
 8000d50:	6263      	str	r3, [r4, #36]	; 0x24
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <std+0x3c>)
 8000d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <std+0x40>)
 8000d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <std+0x44>)
 8000d5c:	6224      	str	r4, [r4, #32]
 8000d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8000d60:	bd10      	pop	{r4, pc}
 8000d62:	bf00      	nop
 8000d64:	080010f9 	.word	0x080010f9
 8000d68:	0800111b 	.word	0x0800111b
 8000d6c:	08001153 	.word	0x08001153
 8000d70:	08001177 	.word	0x08001177

08000d74 <_cleanup_r>:
 8000d74:	4901      	ldr	r1, [pc, #4]	; (8000d7c <_cleanup_r+0x8>)
 8000d76:	f000 b885 	b.w	8000e84 <_fwalk_reent>
 8000d7a:	bf00      	nop
 8000d7c:	08000cd9 	.word	0x08000cd9

08000d80 <__sfmoreglue>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	1e4a      	subs	r2, r1, #1
 8000d84:	2568      	movs	r5, #104	; 0x68
 8000d86:	4355      	muls	r5, r2
 8000d88:	460e      	mov	r6, r1
 8000d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d8e:	f000 f949 	bl	8001024 <_malloc_r>
 8000d92:	4604      	mov	r4, r0
 8000d94:	b140      	cbz	r0, 8000da8 <__sfmoreglue+0x28>
 8000d96:	2100      	movs	r1, #0
 8000d98:	e9c0 1600 	strd	r1, r6, [r0]
 8000d9c:	300c      	adds	r0, #12
 8000d9e:	60a0      	str	r0, [r4, #8]
 8000da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000da4:	f7ff fde6 	bl	8000974 <memset>
 8000da8:	4620      	mov	r0, r4
 8000daa:	bd70      	pop	{r4, r5, r6, pc}

08000dac <__sinit>:
 8000dac:	6983      	ldr	r3, [r0, #24]
 8000dae:	b510      	push	{r4, lr}
 8000db0:	4604      	mov	r4, r0
 8000db2:	bb33      	cbnz	r3, 8000e02 <__sinit+0x56>
 8000db4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000db8:	6503      	str	r3, [r0, #80]	; 0x50
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <__sinit+0x58>)
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <__sinit+0x5c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6282      	str	r2, [r0, #40]	; 0x28
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	bf04      	itt	eq
 8000dc6:	2301      	moveq	r3, #1
 8000dc8:	6183      	streq	r3, [r0, #24]
 8000dca:	f000 f81f 	bl	8000e0c <__sfp>
 8000dce:	6060      	str	r0, [r4, #4]
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f000 f81b 	bl	8000e0c <__sfp>
 8000dd6:	60a0      	str	r0, [r4, #8]
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f000 f817 	bl	8000e0c <__sfp>
 8000dde:	2200      	movs	r2, #0
 8000de0:	60e0      	str	r0, [r4, #12]
 8000de2:	2104      	movs	r1, #4
 8000de4:	6860      	ldr	r0, [r4, #4]
 8000de6:	f7ff ffa1 	bl	8000d2c <std>
 8000dea:	2201      	movs	r2, #1
 8000dec:	2109      	movs	r1, #9
 8000dee:	68a0      	ldr	r0, [r4, #8]
 8000df0:	f7ff ff9c 	bl	8000d2c <std>
 8000df4:	2202      	movs	r2, #2
 8000df6:	2112      	movs	r1, #18
 8000df8:	68e0      	ldr	r0, [r4, #12]
 8000dfa:	f7ff ff97 	bl	8000d2c <std>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61a3      	str	r3, [r4, #24]
 8000e02:	bd10      	pop	{r4, pc}
 8000e04:	080012b4 	.word	0x080012b4
 8000e08:	08000d75 	.word	0x08000d75

08000e0c <__sfp>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <__sfp+0x70>)
 8000e10:	681e      	ldr	r6, [r3, #0]
 8000e12:	69b3      	ldr	r3, [r6, #24]
 8000e14:	4607      	mov	r7, r0
 8000e16:	b913      	cbnz	r3, 8000e1e <__sfp+0x12>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f7ff ffc7 	bl	8000dac <__sinit>
 8000e1e:	3648      	adds	r6, #72	; 0x48
 8000e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	d503      	bpl.n	8000e30 <__sfp+0x24>
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	b133      	cbz	r3, 8000e3a <__sfp+0x2e>
 8000e2c:	6836      	ldr	r6, [r6, #0]
 8000e2e:	e7f7      	b.n	8000e20 <__sfp+0x14>
 8000e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e34:	b16d      	cbz	r5, 8000e52 <__sfp+0x46>
 8000e36:	3468      	adds	r4, #104	; 0x68
 8000e38:	e7f4      	b.n	8000e24 <__sfp+0x18>
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	f7ff ff9f 	bl	8000d80 <__sfmoreglue>
 8000e42:	6030      	str	r0, [r6, #0]
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d1f1      	bne.n	8000e2c <__sfp+0x20>
 8000e48:	230c      	movs	r3, #12
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4620      	mov	r0, r4
 8000e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <__sfp+0x74>)
 8000e54:	6665      	str	r5, [r4, #100]	; 0x64
 8000e56:	e9c4 5500 	strd	r5, r5, [r4]
 8000e5a:	60a5      	str	r5, [r4, #8]
 8000e5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000e60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000e64:	2208      	movs	r2, #8
 8000e66:	4629      	mov	r1, r5
 8000e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e6c:	f7ff fd82 	bl	8000974 <memset>
 8000e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e78:	e7e9      	b.n	8000e4e <__sfp+0x42>
 8000e7a:	bf00      	nop
 8000e7c:	080012b4 	.word	0x080012b4
 8000e80:	ffff0001 	.word	0xffff0001

08000e84 <_fwalk_reent>:
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	4680      	mov	r8, r0
 8000e8a:	4689      	mov	r9, r1
 8000e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e90:	2600      	movs	r6, #0
 8000e92:	b914      	cbnz	r4, 8000e9a <_fwalk_reent+0x16>
 8000e94:	4630      	mov	r0, r6
 8000e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000e9e:	3f01      	subs	r7, #1
 8000ea0:	d501      	bpl.n	8000ea6 <_fwalk_reent+0x22>
 8000ea2:	6824      	ldr	r4, [r4, #0]
 8000ea4:	e7f5      	b.n	8000e92 <_fwalk_reent+0xe>
 8000ea6:	89ab      	ldrh	r3, [r5, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d907      	bls.n	8000ebc <_fwalk_reent+0x38>
 8000eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	d003      	beq.n	8000ebc <_fwalk_reent+0x38>
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	47c8      	blx	r9
 8000eba:	4306      	orrs	r6, r0
 8000ebc:	3568      	adds	r5, #104	; 0x68
 8000ebe:	e7ee      	b.n	8000e9e <_fwalk_reent+0x1a>

08000ec0 <__swhatbuf_r>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	460e      	mov	r6, r1
 8000ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	4614      	mov	r4, r2
 8000ece:	461d      	mov	r5, r3
 8000ed0:	da07      	bge.n	8000ee2 <__swhatbuf_r+0x22>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	602b      	str	r3, [r5, #0]
 8000ed6:	89b3      	ldrh	r3, [r6, #12]
 8000ed8:	061a      	lsls	r2, r3, #24
 8000eda:	d410      	bmi.n	8000efe <__swhatbuf_r+0x3e>
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	e00e      	b.n	8000f00 <__swhatbuf_r+0x40>
 8000ee2:	466a      	mov	r2, sp
 8000ee4:	f000 f96e 	bl	80011c4 <_fstat_r>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	dbf2      	blt.n	8000ed2 <__swhatbuf_r+0x12>
 8000eec:	9a01      	ldr	r2, [sp, #4]
 8000eee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ef2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ef6:	425a      	negs	r2, r3
 8000ef8:	415a      	adcs	r2, r3
 8000efa:	602a      	str	r2, [r5, #0]
 8000efc:	e7ee      	b.n	8000edc <__swhatbuf_r+0x1c>
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	2000      	movs	r0, #0
 8000f02:	6023      	str	r3, [r4, #0]
 8000f04:	b016      	add	sp, #88	; 0x58
 8000f06:	bd70      	pop	{r4, r5, r6, pc}

08000f08 <__smakebuf_r>:
 8000f08:	898b      	ldrh	r3, [r1, #12]
 8000f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f0c:	079d      	lsls	r5, r3, #30
 8000f0e:	4606      	mov	r6, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	d507      	bpl.n	8000f24 <__smakebuf_r+0x1c>
 8000f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	6123      	str	r3, [r4, #16]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6163      	str	r3, [r4, #20]
 8000f20:	b002      	add	sp, #8
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
 8000f24:	ab01      	add	r3, sp, #4
 8000f26:	466a      	mov	r2, sp
 8000f28:	f7ff ffca 	bl	8000ec0 <__swhatbuf_r>
 8000f2c:	9900      	ldr	r1, [sp, #0]
 8000f2e:	4605      	mov	r5, r0
 8000f30:	4630      	mov	r0, r6
 8000f32:	f000 f877 	bl	8001024 <_malloc_r>
 8000f36:	b948      	cbnz	r0, 8000f4c <__smakebuf_r+0x44>
 8000f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f3c:	059a      	lsls	r2, r3, #22
 8000f3e:	d4ef      	bmi.n	8000f20 <__smakebuf_r+0x18>
 8000f40:	f023 0303 	bic.w	r3, r3, #3
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	81a3      	strh	r3, [r4, #12]
 8000f4a:	e7e3      	b.n	8000f14 <__smakebuf_r+0xc>
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <__smakebuf_r+0x7c>)
 8000f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	6020      	str	r0, [r4, #0]
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	81a3      	strh	r3, [r4, #12]
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	6163      	str	r3, [r4, #20]
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	6120      	str	r0, [r4, #16]
 8000f62:	b15b      	cbz	r3, 8000f7c <__smakebuf_r+0x74>
 8000f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f000 f93d 	bl	80011e8 <_isatty_r>
 8000f6e:	b128      	cbz	r0, 8000f7c <__smakebuf_r+0x74>
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	81a3      	strh	r3, [r4, #12]
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	81a5      	strh	r5, [r4, #12]
 8000f82:	e7cd      	b.n	8000f20 <__smakebuf_r+0x18>
 8000f84:	08000d75 	.word	0x08000d75

08000f88 <_free_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4605      	mov	r5, r0
 8000f8c:	2900      	cmp	r1, #0
 8000f8e:	d045      	beq.n	800101c <_free_r+0x94>
 8000f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f94:	1f0c      	subs	r4, r1, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bfb8      	it	lt
 8000f9a:	18e4      	addlt	r4, r4, r3
 8000f9c:	f000 f946 	bl	800122c <__malloc_lock>
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <_free_r+0x98>)
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	b933      	cbnz	r3, 8000fb6 <_free_r+0x2e>
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	6014      	str	r4, [r2, #0]
 8000fac:	4628      	mov	r0, r5
 8000fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb2:	f000 b93c 	b.w	800122e <__malloc_unlock>
 8000fb6:	42a3      	cmp	r3, r4
 8000fb8:	d90c      	bls.n	8000fd4 <_free_r+0x4c>
 8000fba:	6821      	ldr	r1, [r4, #0]
 8000fbc:	1862      	adds	r2, r4, r1
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	bf04      	itt	eq
 8000fc2:	681a      	ldreq	r2, [r3, #0]
 8000fc4:	685b      	ldreq	r3, [r3, #4]
 8000fc6:	6063      	str	r3, [r4, #4]
 8000fc8:	bf04      	itt	eq
 8000fca:	1852      	addeq	r2, r2, r1
 8000fcc:	6022      	streq	r2, [r4, #0]
 8000fce:	6004      	str	r4, [r0, #0]
 8000fd0:	e7ec      	b.n	8000fac <_free_r+0x24>
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	b10a      	cbz	r2, 8000fdc <_free_r+0x54>
 8000fd8:	42a2      	cmp	r2, r4
 8000fda:	d9fa      	bls.n	8000fd2 <_free_r+0x4a>
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	1858      	adds	r0, r3, r1
 8000fe0:	42a0      	cmp	r0, r4
 8000fe2:	d10b      	bne.n	8000ffc <_free_r+0x74>
 8000fe4:	6820      	ldr	r0, [r4, #0]
 8000fe6:	4401      	add	r1, r0
 8000fe8:	1858      	adds	r0, r3, r1
 8000fea:	4282      	cmp	r2, r0
 8000fec:	6019      	str	r1, [r3, #0]
 8000fee:	d1dd      	bne.n	8000fac <_free_r+0x24>
 8000ff0:	6810      	ldr	r0, [r2, #0]
 8000ff2:	6852      	ldr	r2, [r2, #4]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	4401      	add	r1, r0
 8000ff8:	6019      	str	r1, [r3, #0]
 8000ffa:	e7d7      	b.n	8000fac <_free_r+0x24>
 8000ffc:	d902      	bls.n	8001004 <_free_r+0x7c>
 8000ffe:	230c      	movs	r3, #12
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	e7d3      	b.n	8000fac <_free_r+0x24>
 8001004:	6820      	ldr	r0, [r4, #0]
 8001006:	1821      	adds	r1, r4, r0
 8001008:	428a      	cmp	r2, r1
 800100a:	bf04      	itt	eq
 800100c:	6811      	ldreq	r1, [r2, #0]
 800100e:	6852      	ldreq	r2, [r2, #4]
 8001010:	6062      	str	r2, [r4, #4]
 8001012:	bf04      	itt	eq
 8001014:	1809      	addeq	r1, r1, r0
 8001016:	6021      	streq	r1, [r4, #0]
 8001018:	605c      	str	r4, [r3, #4]
 800101a:	e7c7      	b.n	8000fac <_free_r+0x24>
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	bf00      	nop
 8001020:	2000008c 	.word	0x2000008c

08001024 <_malloc_r>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	1ccd      	adds	r5, r1, #3
 8001028:	f025 0503 	bic.w	r5, r5, #3
 800102c:	3508      	adds	r5, #8
 800102e:	2d0c      	cmp	r5, #12
 8001030:	bf38      	it	cc
 8001032:	250c      	movcc	r5, #12
 8001034:	2d00      	cmp	r5, #0
 8001036:	4606      	mov	r6, r0
 8001038:	db01      	blt.n	800103e <_malloc_r+0x1a>
 800103a:	42a9      	cmp	r1, r5
 800103c:	d903      	bls.n	8001046 <_malloc_r+0x22>
 800103e:	230c      	movs	r3, #12
 8001040:	6033      	str	r3, [r6, #0]
 8001042:	2000      	movs	r0, #0
 8001044:	bd70      	pop	{r4, r5, r6, pc}
 8001046:	f000 f8f1 	bl	800122c <__malloc_lock>
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <_malloc_r+0xac>)
 800104c:	6814      	ldr	r4, [r2, #0]
 800104e:	4621      	mov	r1, r4
 8001050:	b991      	cbnz	r1, 8001078 <_malloc_r+0x54>
 8001052:	4c20      	ldr	r4, [pc, #128]	; (80010d4 <_malloc_r+0xb0>)
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	b91b      	cbnz	r3, 8001060 <_malloc_r+0x3c>
 8001058:	4630      	mov	r0, r6
 800105a:	f000 f83d 	bl	80010d8 <_sbrk_r>
 800105e:	6020      	str	r0, [r4, #0]
 8001060:	4629      	mov	r1, r5
 8001062:	4630      	mov	r0, r6
 8001064:	f000 f838 	bl	80010d8 <_sbrk_r>
 8001068:	1c43      	adds	r3, r0, #1
 800106a:	d124      	bne.n	80010b6 <_malloc_r+0x92>
 800106c:	230c      	movs	r3, #12
 800106e:	6033      	str	r3, [r6, #0]
 8001070:	4630      	mov	r0, r6
 8001072:	f000 f8dc 	bl	800122e <__malloc_unlock>
 8001076:	e7e4      	b.n	8001042 <_malloc_r+0x1e>
 8001078:	680b      	ldr	r3, [r1, #0]
 800107a:	1b5b      	subs	r3, r3, r5
 800107c:	d418      	bmi.n	80010b0 <_malloc_r+0x8c>
 800107e:	2b0b      	cmp	r3, #11
 8001080:	d90f      	bls.n	80010a2 <_malloc_r+0x7e>
 8001082:	600b      	str	r3, [r1, #0]
 8001084:	50cd      	str	r5, [r1, r3]
 8001086:	18cc      	adds	r4, r1, r3
 8001088:	4630      	mov	r0, r6
 800108a:	f000 f8d0 	bl	800122e <__malloc_unlock>
 800108e:	f104 000b 	add.w	r0, r4, #11
 8001092:	1d23      	adds	r3, r4, #4
 8001094:	f020 0007 	bic.w	r0, r0, #7
 8001098:	1ac3      	subs	r3, r0, r3
 800109a:	d0d3      	beq.n	8001044 <_malloc_r+0x20>
 800109c:	425a      	negs	r2, r3
 800109e:	50e2      	str	r2, [r4, r3]
 80010a0:	e7d0      	b.n	8001044 <_malloc_r+0x20>
 80010a2:	428c      	cmp	r4, r1
 80010a4:	684b      	ldr	r3, [r1, #4]
 80010a6:	bf16      	itet	ne
 80010a8:	6063      	strne	r3, [r4, #4]
 80010aa:	6013      	streq	r3, [r2, #0]
 80010ac:	460c      	movne	r4, r1
 80010ae:	e7eb      	b.n	8001088 <_malloc_r+0x64>
 80010b0:	460c      	mov	r4, r1
 80010b2:	6849      	ldr	r1, [r1, #4]
 80010b4:	e7cc      	b.n	8001050 <_malloc_r+0x2c>
 80010b6:	1cc4      	adds	r4, r0, #3
 80010b8:	f024 0403 	bic.w	r4, r4, #3
 80010bc:	42a0      	cmp	r0, r4
 80010be:	d005      	beq.n	80010cc <_malloc_r+0xa8>
 80010c0:	1a21      	subs	r1, r4, r0
 80010c2:	4630      	mov	r0, r6
 80010c4:	f000 f808 	bl	80010d8 <_sbrk_r>
 80010c8:	3001      	adds	r0, #1
 80010ca:	d0cf      	beq.n	800106c <_malloc_r+0x48>
 80010cc:	6025      	str	r5, [r4, #0]
 80010ce:	e7db      	b.n	8001088 <_malloc_r+0x64>
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	20000090 	.word	0x20000090

080010d8 <_sbrk_r>:
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4c06      	ldr	r4, [pc, #24]	; (80010f4 <_sbrk_r+0x1c>)
 80010dc:	2300      	movs	r3, #0
 80010de:	4605      	mov	r5, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	6023      	str	r3, [r4, #0]
 80010e4:	f7ff fbc6 	bl	8000874 <_sbrk>
 80010e8:	1c43      	adds	r3, r0, #1
 80010ea:	d102      	bne.n	80010f2 <_sbrk_r+0x1a>
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	b103      	cbz	r3, 80010f2 <_sbrk_r+0x1a>
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	200000e4 	.word	0x200000e4

080010f8 <__sread>:
 80010f8:	b510      	push	{r4, lr}
 80010fa:	460c      	mov	r4, r1
 80010fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001100:	f000 f896 	bl	8001230 <_read_r>
 8001104:	2800      	cmp	r0, #0
 8001106:	bfab      	itete	ge
 8001108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800110a:	89a3      	ldrhlt	r3, [r4, #12]
 800110c:	181b      	addge	r3, r3, r0
 800110e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001112:	bfac      	ite	ge
 8001114:	6563      	strge	r3, [r4, #84]	; 0x54
 8001116:	81a3      	strhlt	r3, [r4, #12]
 8001118:	bd10      	pop	{r4, pc}

0800111a <__swrite>:
 800111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800111e:	461f      	mov	r7, r3
 8001120:	898b      	ldrh	r3, [r1, #12]
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	4605      	mov	r5, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4616      	mov	r6, r2
 800112a:	d505      	bpl.n	8001138 <__swrite+0x1e>
 800112c:	2302      	movs	r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001134:	f000 f868 	bl	8001208 <_lseek_r>
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800113e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001142:	81a3      	strh	r3, [r4, #12]
 8001144:	4632      	mov	r2, r6
 8001146:	463b      	mov	r3, r7
 8001148:	4628      	mov	r0, r5
 800114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800114e:	f000 b817 	b.w	8001180 <_write_r>

08001152 <__sseek>:
 8001152:	b510      	push	{r4, lr}
 8001154:	460c      	mov	r4, r1
 8001156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115a:	f000 f855 	bl	8001208 <_lseek_r>
 800115e:	1c43      	adds	r3, r0, #1
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	bf15      	itete	ne
 8001164:	6560      	strne	r0, [r4, #84]	; 0x54
 8001166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800116a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800116e:	81a3      	strheq	r3, [r4, #12]
 8001170:	bf18      	it	ne
 8001172:	81a3      	strhne	r3, [r4, #12]
 8001174:	bd10      	pop	{r4, pc}

08001176 <__sclose>:
 8001176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117a:	f000 b813 	b.w	80011a4 <_close_r>
	...

08001180 <_write_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4c07      	ldr	r4, [pc, #28]	; (80011a0 <_write_r+0x20>)
 8001184:	4605      	mov	r5, r0
 8001186:	4608      	mov	r0, r1
 8001188:	4611      	mov	r1, r2
 800118a:	2200      	movs	r2, #0
 800118c:	6022      	str	r2, [r4, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f7ff fb23 	bl	80007da <_write>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_write_r+0x1e>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	b103      	cbz	r3, 800119e <_write_r+0x1e>
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	200000e4 	.word	0x200000e4

080011a4 <_close_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4c06      	ldr	r4, [pc, #24]	; (80011c0 <_close_r+0x1c>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	4605      	mov	r5, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	6023      	str	r3, [r4, #0]
 80011b0:	f7ff fb2f 	bl	8000812 <_close>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_close_r+0x1a>
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	b103      	cbz	r3, 80011be <_close_r+0x1a>
 80011bc:	602b      	str	r3, [r5, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	200000e4 	.word	0x200000e4

080011c4 <_fstat_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4c07      	ldr	r4, [pc, #28]	; (80011e4 <_fstat_r+0x20>)
 80011c8:	2300      	movs	r3, #0
 80011ca:	4605      	mov	r5, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	f7ff fb29 	bl	8000828 <_fstat>
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	d102      	bne.n	80011e0 <_fstat_r+0x1c>
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	b103      	cbz	r3, 80011e0 <_fstat_r+0x1c>
 80011de:	602b      	str	r3, [r5, #0]
 80011e0:	bd38      	pop	{r3, r4, r5, pc}
 80011e2:	bf00      	nop
 80011e4:	200000e4 	.word	0x200000e4

080011e8 <_isatty_r>:
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4c06      	ldr	r4, [pc, #24]	; (8001204 <_isatty_r+0x1c>)
 80011ec:	2300      	movs	r3, #0
 80011ee:	4605      	mov	r5, r0
 80011f0:	4608      	mov	r0, r1
 80011f2:	6023      	str	r3, [r4, #0]
 80011f4:	f7ff fb27 	bl	8000846 <_isatty>
 80011f8:	1c43      	adds	r3, r0, #1
 80011fa:	d102      	bne.n	8001202 <_isatty_r+0x1a>
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	b103      	cbz	r3, 8001202 <_isatty_r+0x1a>
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	200000e4 	.word	0x200000e4

08001208 <_lseek_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4c07      	ldr	r4, [pc, #28]	; (8001228 <_lseek_r+0x20>)
 800120c:	4605      	mov	r5, r0
 800120e:	4608      	mov	r0, r1
 8001210:	4611      	mov	r1, r2
 8001212:	2200      	movs	r2, #0
 8001214:	6022      	str	r2, [r4, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f7ff fb1f 	bl	800085a <_lseek>
 800121c:	1c43      	adds	r3, r0, #1
 800121e:	d102      	bne.n	8001226 <_lseek_r+0x1e>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	b103      	cbz	r3, 8001226 <_lseek_r+0x1e>
 8001224:	602b      	str	r3, [r5, #0]
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	200000e4 	.word	0x200000e4

0800122c <__malloc_lock>:
 800122c:	4770      	bx	lr

0800122e <__malloc_unlock>:
 800122e:	4770      	bx	lr

08001230 <_read_r>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4c07      	ldr	r4, [pc, #28]	; (8001250 <_read_r+0x20>)
 8001234:	4605      	mov	r5, r0
 8001236:	4608      	mov	r0, r1
 8001238:	4611      	mov	r1, r2
 800123a:	2200      	movs	r2, #0
 800123c:	6022      	str	r2, [r4, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f7ff faae 	bl	80007a0 <_read>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_read_r+0x1e>
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	b103      	cbz	r3, 800124e <_read_r+0x1e>
 800124c:	602b      	str	r3, [r5, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	200000e4 	.word	0x200000e4

08001254 <_init>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr

08001260 <_fini>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	bf00      	nop
 8001264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001266:	bc08      	pop	{r3}
 8001268:	469e      	mov	lr, r3
 800126a:	4770      	bx	lr
